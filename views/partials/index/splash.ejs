<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" integrity="sha512-dLxUelApnYxpLt6K2iomGngnHO83iUvZytA3YjDUCjT0HDOHKXnVYdf3hU4JjM8uEhxf9nD1/ey98U3t2vZ0qQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/loaders/GLTFLoader.js"></script>
<script src="https://unpkg.com/three@0.118.1/examples/jsm/"></script>
<script type="module">
  import { EffectComposer } from 'https://unpkg.com/three@0.118.1/examples/jsm/postprocessing/EffectComposer.js'
  import { RenderPass } from 'https://unpkg.com/three@0.118.1/examples/jsm/postprocessing/RenderPass.js'
  let renderer, scene, camera, composer, model;
  /*
  if (webgl_support()) { // threejs splash
    init();
  } else { // normal splash
    const img = document.createElement('img');
    img.src = '/static/img/graphics/TD-scene-image.png';
    img.style.maxWidth = '100%';
    img.style.maxHeight = '750px';
    img.style.position = 'absolute';
    img.style.display = 'block';
    img.style.right = '0px';
    img.style.minWidth = '390px';
    document.getElementById('splash-content').appendChild( img ); 
  }
  */

  function init() {

    // create the camera
    camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.1, 120 );
    camera.lookAt(0,0,0);
    camera.position.set(-12.0, 12.0, 35.0);

    // Load the background texture
    // const texture = new THREE.TextureLoader().load( '/static/img/backgrounds/splash_background_fancy.png' ); // BAD quality
    // scene.background = texture;

    // ---- create the scene ----
    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x632ed2 );

    // scene mesh
    const loader = new THREE.GLTFLoader();
    loader.load( '/static/objects/TD_scene.glb', function ( gltf ) {
      model = gltf.scene;
      scene.add( model );
    }, undefined, function ( error ) {
	    console.error( error );
    } );

    // scene lights
    const ptlight1 = new THREE.PointLight();
    ptlight1.position.set( 10, 2, 5);
    scene.add( ptlight1 );
    ptlight1.position.set( 4, 9, 9);
    scene.add( ptlight1 );
    ptlight1.position.set( 10, 8, 5);
    scene.add( ptlight1 );
    const ptlight2 = new THREE.PointLight(0xffeebd)
    /*
    ptlight2.position.set( 10, 7, 10);
    scene.add( ptlight2 );
    ptlight2.position.set( -10, 5, -10);
    scene.add( ptlight2 );
    ptlight2.position.set( -20, 7, 10);
    scene.add( ptlight2 );
    */
    ptlight2.position.set( 5, 0, 7);
    scene.add( ptlight2 );
    ptlight2.position.set( -3, 7, 10);
    scene.add( ptlight2 );
    ptlight2.position.set( -8, 15, 9);
    scene.add( ptlight2 );
    //const ambientLight = new THREE.AmbientLight(0xaaaaaa);
    //scene.add(ambientLight);

    // ---- create the renderer ----
    renderer = new THREE.WebGLRenderer({ antialias: false, alpha:true });
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );

    // ---- create the composer ----
    composer = new EffectComposer( renderer );
    composer.addPass( new RenderPass( scene, camera ) );

    // add it to splash
    document.getElementById('splash').appendChild( renderer.domElement );
    window.addEventListener( 'resize', onWindowResize );

    // start animation
    animate();
  }

  function animate() {
    requestAnimationFrame( animate );
    if ( model ) {
      model.rotation.y -= 0.001;
    }
    // controls.update();
    renderer.render( scene, camera );
  }

  function onWindowResize() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize( width, height );
  }

  function webgl_support () { 
   try {
    var canvas = document.createElement('canvas'); 
    return !!window.WebGLRenderingContext &&
      (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
   } catch(e) {
     return false;
   }
 };

</script>

<div id="splash" class="splash">
  <a href="https://discord.gg/V65juTU" target="_blank">
    <!-- need to update this invite link -->
    <span class="discord d-flex align-items-center">
      <img src="/static/img/graphics/discord.png">
    </span>
  </a>
  <div id="splash-content" class="col-md-10 d-flex flex-column">
  <!--<div id="splash-content">-->
    <div class="splash-title" style="padding: 8em 0">
      <img id="text-logo" src="/static/img/logos/text-logo.png" class="text" alt="TAMU Datathon 2020" />
      <h2 style="padding-top: 10px">October 17 - 18, 2021</h2>
    </div>
    <a class="mlh-trust-badge" href="https://mlh.io/seasons/na-2021/events?utm_source=na-hackathon&utm_medium=TrustBadge&utm_campaign=2021-season&utm_content=white" target="_blank"><img src="/static/img/logos/mlh-2021-badge.svg" alt="Major League Hacking 2021 Hackathon Season" style="width: 100%" /></a>
  </div>
</div>